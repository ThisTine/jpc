"use client";

import {
  Checkbox,
  FormControl,
  FormControlLabel,
  FormHelperText,
  InputLabel,
  MenuItem,
  Select,
  Stack,
  TextField,
  Typography,
} from "@mui/material";
import {
  Controller,
  FormProvider,
  useController,
  useFieldArray,
  useForm,
} from "react-hook-form";
import { z } from "zod";
import RegisterLocalStorage from "../RegisterLocalStorage";
import { registerQuestionFormData } from "@/share/validation/formData";
import { ibmBold } from "@/utils/fonts";
import { validators } from "../RegisterSubmitter";
import { zodResolver } from "@hookform/resolvers/zod";
import { ls } from "@/utils/misc";
import { useEffect, useState } from "react";

export interface RegisterQuestionFormData
  extends z.infer<typeof registerQuestionFormData> {}

export const DEFAULT_JOIN_DATES = [
  "‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå‡∏ó‡∏µ‡πà 12 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2567",
  "‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå‡∏ó‡∏µ‡πà 13 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2567",
  "‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà 14 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2567",
];

export default function RegisterQuestion() {
  const form = useForm<RegisterQuestionFormData>({
    defaultValues: {
      pr: ls("registerQuestion", "pr") ?? "Hello",
      self_introduction: ls("registerQuestion", "self_introduction") ?? "",
      why_join: ls("registerQuestion", "why_join") ?? "",
      expect: ls("registerQuestion", "expect") ?? "",
      experience: ls("registerQuestion", "experience") ?? "",
      goal: ls("registerQuestion", "goal") ?? "",
      join_date: ls("registerQuestion", "join_date") ?? DEFAULT_JOIN_DATES,
    },
    resolver: zodResolver(registerQuestionFormData),
  });

  validators.registerHandler("handleSubmitQuestion", form.handleSubmit);

  return (
    <FormProvider {...form}>
      <Stack my={5}>
        <Typography
          sx={{
            fontSize: "20px",
            fontFamily: ibmBold.style.fontFamily,
            color: "#A5CE89",
            alignSelf: "center",
            "@media (min-width: 724px)": {
              fontSize: "24px",
            },
          }}
        >
          ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≠‡∏á‡πÜ ‡∏à‡∏≤‡∏Å‡πÇ‡∏à‡πÄ‡∏ä‡∏ü üìù
        </Typography>
      </Stack>
      <Stack gap={2}>
        <Stack width="100%">
          <Typography className="text-lg">
            üåü ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡πÜ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡πÉ‡∏î?
          </Typography>
          {/* <TextField
            variant="outlined"
            fullWidth
            placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"
            label="‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
            {...form.register("pr")}
            sx={{
              my: "8px",
            }}
          /> */}
          <Controller
            name="pr"
            control={form.control}
            render={({ field }) => (
              <FormControl fullWidth>
                <InputLabel id="pr-label">‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì*</InputLabel>
                <Select
                  label="‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì*"
                  error={!!form.formState.errors.pr}
                  {...field}
                >
                  {"Facebook Instragram Camphub ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÜ ‡∏£‡∏∏‡πà‡∏ô‡∏û‡∏µ‡πà ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ì‡∏∞ ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢"
                    .split(" ")
                    .map((v) => (
                      <MenuItem key={v} value={v}>
                        {v}
                      </MenuItem>
                    ))}
                </Select>
              </FormControl>
            )}
          />
        </Stack>

        <Stack width="100%">
          <Typography className="text-lg" mb="10px">
            üåü ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ ‡πÉ‡∏´‡πâ‡πÇ‡∏à‡πÄ‡∏ã‡∏ü‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡πÜ ‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö
          </Typography>
          <TextField
            variant="outlined"
            fullWidth
            multiline
            minRows={4}
            label="‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì*"
            placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö*"
            error={!!form.formState.errors.self_introduction}
            helperText={form.formState.errors.self_introduction?.message}
            {...form.register("self_introduction")}
          />
        </Stack>

        <Stack width="100%">
          <Typography className="text-lg" mb="10px">
            üåü ‡πÇ‡∏à‡πÄ‡∏ã‡∏ü‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡πÜ ‡∏ñ‡∏∂‡∏á‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏¢‡∏ô‡∏µ‡πâ?
          </Typography>
          <TextField
            variant="outlined"
            fullWidth
            multiline
            minRows={4}
            label="‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì*"
            placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö*"
            error={!!form.formState.errors.why_join}
            helperText={form.formState.errors.why_join?.message}
            {...form.register("why_join")}
          />
        </Stack>
      </Stack>

      <Stack width="100%" my="16px">
        <Typography className="text-lg" mb="10px">
          üåü ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡πÜ ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ?
        </Typography>
        <TextField
          variant="outlined"
          fullWidth
          multiline
          minRows={4}
          label="‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì*"
          placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö*"
          error={!!form.formState.errors.expect}
          helperText={form.formState.errors.expect?.message}
          {...form.register("expect")}
        />
      </Stack>

      <Stack width="100%">
        <Typography className="text-lg" mb="10px">
          üåü ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡πÜ ‡∏à‡∏∞‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏°‡πà ‡πÜ
          ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö?
        </Typography>
        <TextField
          variant="outlined"
          fullWidth
          multiline
          minRows={4}
          label="‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì*"
          placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö*"
          error={!!form.formState.errors.experience}
          helperText={form.formState.errors.experience?.message}
          {...form.register("experience")}
        />
      </Stack>

      <Stack width="100%" my="16px">
        <Typography className="text-lg" mb="10px">
          üåü ‡πÇ‡∏à‡πÄ‡∏ã‡∏ü‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 4 ‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡πÜ ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?
        </Typography>
        <TextField
          variant="outlined"
          fullWidth
          multiline
          minRows={4}
          label="‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì*"
          placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö*"
          error={!!form.formState.errors.goal}
          helperText={form.formState.errors.goal?.message}
          {...form.register("goal")}
        />
      </Stack>

      <Stack width="100%" my="16px">
        <Typography className="text-lg" mb="10px">
          üåü ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° JPC ‡∏ß‡∏±‡∏ô‡πÑ‡∏´‡∏ô‡∏ö‡πâ‡∏≤‡∏á?
        </Typography>
        <FormControl error={!!form.formState.errors.join_date}>
          <Checkboxes
            control={form.control}
            name="join_date"
            options={DEFAULT_JOIN_DATES}
          />
          <FormHelperText>
            {String(form.formState.errors.join_date?.message ?? "")}
          </FormHelperText>
        </FormControl>
      </Stack>

      <RegisterLocalStorage store="registerQuestion" />
    </FormProvider>
  );
}

const Checkboxes = ({
  options,
  control,
  name,
}: {
  options: string[];
  control: any;
  name: string;
}) => {
  const { field } = useController({
    control,
    name,
  });
  const [value, setValue] = useState(field.value || []);

  return (
    <>
      {options.map((option, index) => (
        <FormControlLabel
          key={option}
          control={
            <Checkbox
              onChange={(e) => {
                const valueCopy = [...value];
                // update checkbox value
                valueCopy[index] = e.target.checked ? e.target.value : null;
                // send data to react hook form
                field.onChange(valueCopy);
                // update local state
                setValue(valueCopy);
              }}
              key={option}
              checked={value.includes(option)}
              value={option}
            />
          }
          label={option}
        />
      ))}
    </>
  );
};
